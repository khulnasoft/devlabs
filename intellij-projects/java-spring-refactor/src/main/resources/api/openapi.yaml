openapi: 3.1.0
info:
  title: KhulnaSoft User Management API
  description: API for managing users in the KhulnaSoft DevLabs ecosystem
  version: 1.0.0
  contact:
    name: KhulnaSoft DevLabs
    url: https://github.com/KhulnaSoft/devlabs
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.devlabs.khulnasoft.com/api/v1
    description: Production server

components:
  schemas:
    UserDto:
      type: object
      required:
        - id
        - username
        - email
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          example: 123
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          example: "john_doe"
        email:
          type: string
          format: email
          maxLength: 255
          example: "john.doe@example.com"
        firstName:
          type: string
          maxLength: 100
          example: "John"
        lastName:
          type: string
          maxLength: 100
          example: "Doe"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          example: "+1234567890"
        active:
          type: boolean
          default: true
          example: true
        role:
          type: string
          enum: [USER, ADMIN, MODERATOR]
          example: "USER"
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          example: "2024-01-15T10:30:00Z"
        version:
          type: string
          readOnly: true
          example: "1.0"

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        data:
          oneOf:
            - $ref: '#/components/schemas/UserDto'
            - type: array
              items:
                $ref: '#/components/schemas/UserDto'
        errorCode:
          type: string
          example: "VALIDATION_ERROR"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed"
        path:
          type: string
          example: "/api/v1/users"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    CreateUserRequest:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          example: "john_doe"
        email:
          type: string
          format: email
          maxLength: 255
          example: "john.doe@example.com"
        firstName:
          type: string
          maxLength: 100
          example: "John"
        lastName:
          type: string
          maxLength: 100
          example: "Doe"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          example: "+1234567890"
        active:
          type: boolean
          default: true
        role:
          type: string
          enum: [USER, ADMIN, MODERATOR]
          default: "USER"

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 100
          example: "John"
        lastName:
          type: string
          maxLength: 100
          example: "Doe"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          example: "+1234567890"
        active:
          type: boolean
          example: true
        role:
          type: string
          enum: [USER, ADMIN, MODERATOR]
          example: "USER"

  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: 123

    page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1

    size:
      name: size
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 20

    sortBy:
      name: sortBy
      in: query
      schema:
        type: string
        enum: [id, username, email, createdAt]
        default: id
      example: username

    sortDir:
      name: sortDir
      in: query
      schema:
        type: string
        enum: [asc, desc]
        default: asc
      example: asc

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 400
            error: "Bad Request"
            message: "Validation failed"
            path: "/api/v1/users"
            timestamp: "2024-01-15T10:30:00Z"

    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 404
            error: "Not Found"
            message: "User not found"
            path: "/api/v1/users/123"
            timestamp: "2024-01-15T10:30:00Z"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 500
            error: "Internal Server Error"
            message: "An unexpected error occurred"
            path: "/api/v1/users"
            timestamp: "2024-01-15T10:30:00Z"

paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of users with optional filtering and sorting
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/sortBy'
        - $ref: '#/components/parameters/sortDir'
        - name: username
          in: query
          schema:
            type: string
            minLength: 3
          example: "john"
        - name: email
          in: query
          schema:
            type: string
            format: email
          example: "john.doe@example.com"
        - name: active
          in: query
          schema:
            type: boolean
          example: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserDto'
                          pagination:
                            type: object
                            properties:
                              totalElements:
                                type: integer
                                example: 100
                              totalPages:
                                type: integer
                                example: 5
                              currentPage:
                                type: integer
                                example: 1
                              pageSize:
                                type: integer
                                example: 20
                              hasNext:
                                type: boolean
                                example: true
                              hasPrevious:
                                type: boolean
                                example: false
              example:
                success: true
                message: "Users retrieved successfully"
                data:
                  users:
                    - id: 1
                      username: "john_doe"
                      email: "john.doe@example.com"
                      firstName: "John"
                      lastName: "Doe"
                      active: true
                      role: "USER"
                      createdAt: "2024-01-15T10:30:00Z"
                      updatedAt: "2024-01-15T10:30:00Z"
                      version: "1.0"
                  pagination:
                    totalElements: 100
                    totalPages: 5
                    currentPage: 1
                    pageSize: 20
                    hasNext: true
                    hasPrevious: false
                timestamp: "2024-01-15T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user with the provided information
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              username: "john_doe"
              email: "john.doe@example.com"
              firstName: "John"
              lastName: "Doe"
              phone: "+1234567890"
              active: true
              role: "USER"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserDto'
              example:
                success: true
                message: "User created successfully"
                data:
                  id: 123
                  username: "john_doe"
                  email: "john.doe@example.com"
                  firstName: "John"
                  lastName: "Doe"
                  active: true
                  role: "USER"
                  createdAt: "2024-01-15T10:30:00Z"
                  updatedAt: "2024-01-15T10:30:00Z"
                  version: "1.0"
                timestamp: "2024-01-15T10:30:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                status: 409
                error: "Conflict"
                message: "Username or email already exists"
                path: "/api/v1/users"
                timestamp: "2024-01-15T10:30:00Z"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserDto'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user by their ID
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/activate:
    post:
      tags:
        - Users
      summary: Activate user
      description: Activate a user account
      operationId: activateUser
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserDto'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/deactivate:
    post:
      tags:
        - Users
      summary: Deactivate user
      description: Deactivate a user account
      operationId: deactivateUser
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserDto'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check the health status of the application
      operationId: healthCheck
      responses:
        '200':
          description: Application is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                  version:
                    type: string
                    example: "1.0.0"
                  uptime:
                    type: string
                    example: "PT2H30M15S"

  /metrics:
    get:
      tags:
        - System
      summary: Application metrics
      description: Get application metrics and performance indicators
      operationId: getMetrics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '401':
          description: Unauthorized
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
