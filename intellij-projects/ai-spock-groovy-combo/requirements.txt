# Natural Language Test Requirements for OddEvenCamp
# This file demonstrates how to write requirements that can be automatically converted to Spock tests

## Feature: Number Classification
As a developer, I want to classify numbers as even or odd so that I can implement business logic correctly.

### Scenario: Even Number Classification
Given that I have a positive even number
When I call the check method on the OddEvenCamp
Then I should get 1 as the result

### Scenario: Odd Number Classification
Given that I have a positive odd number
When I call the check method on the OddEvenCamp
Then I should get 0 as the result

### Scenario: Zero Input
Given that I have zero as input
When I call the check method on the OddEvenCamp
Then I should get a NegativeNumberException

### Scenario: Negative Number Input
Given that I have a negative number
When I call the check method on the OddEvenCamp
Then I should get a NegativeNumberException

### Scenario: Large Number Handling
Given that I have a very large positive number
When I call the check method on the OddEvenCamp
Then I should get the correct parity result

## Feature: Performance Requirements
As a system administrator, I want the number classification to be fast so that it doesn't impact system performance.

### Scenario: Performance Under Load
Given that I have a thousand numbers to classify
When I process them all through the OddEvenCamp
Then the total processing time should be less than 1 second

## Feature: Integration Testing
As a QA engineer, I want to test the integration with external validation services.

### Scenario: Integration with External Service
Given that I have an external validation service
When I validate a number through the service wrapper
Then I should get both validation and parity results

## Test Data Requirements
For comprehensive testing, I need various test data scenarios:

| Input | Expected | Category |
|-------|----------|----------|
| 0     | Exception | Boundary |
| -1    | Exception | Negative |
| 1     | 0        | Positive |
| 2     | 1        | Positive |
| 100   | 1        | Positive |
| 101   | 0        | Positive |
| 1000  | 1        | Positive |
| 1001  | 0        | Positive |

## Edge Cases to Test
- Zero (boundary case)
- Negative numbers (error case)
- Very large numbers (performance case)
- Null input (error handling)
- Maximum integer value (boundary case)
- Minimum integer value (boundary case)
