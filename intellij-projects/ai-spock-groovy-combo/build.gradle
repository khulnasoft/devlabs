plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'jacoco' version '0.8.12'
    id 'com.github.spotbugs' version '5.0.12'
    id 'checkstyle' version '8.52'
    id 'maven-publish' version '4.1.0'
}

group = 'com.khulnasoft'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// Groovy configuration
groovy {
    groovyOptions.javaAnnotationProcessing = true
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId = 'com.khulnasoft'
            artifactId = 'ai-spock-groovy-combo'
            version = '0.0.1-SNAPSHOT'
        }
    }
}

dependencies {
    // Core dependencies
    implementation 'org.apache.groovy:groovy:4.0.22'
    implementation 'org.apache.groovy:groovy-json:4.0.22'
    implementation 'org.apache.groovy:groovy-xml:4.0.22'

    // AI and NLP dependencies
    implementation 'org.apache.opennlp:opennlp-tools:2.3.0'
    implementation 'edu.stanford.nlp:stanford-corenlp:4.5.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.2'

    // Testing dependencies
    testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-4.0'
    testImplementation 'org.spockframework:spock-spring:2.4-M1-groovy-4.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'

    // Additional utilities
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.14'
    testImplementation 'ch.qos.logback:logback-classic:1.4.14'
    testImplementation 'org.slf4j:slf4j-api:2.0.9'

    // AST and reflection utilities
    implementation 'org.codehaus.groovy:groovy-astbuilder:4.0.22'
    implementation 'org.reflections:reflections:0.10.2'
}

// Source sets configuration
sourceSets {
    main {
        java { srcDirs = [] }    // Exclude Java files
        groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }
    }
    test {
        java { srcDirs = [] }
        groovy { srcDirs = ['src/test/java', 'src/test/groovy'] }
    }
}

tasks.named('test') {
    useJUnitPlatform()

    maxParallelForks = Runtime.runtime.availableProcessors()

    jvmArgs(
        '-XX:+UseParallelGC',
        '-Xmx2g',
        '-Djava.awt.headless=true'
    )

    reports.junitXml.destination = file('build/test-results')
    reports.html.destination = file('build/reports/tests')
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform()

    include '**/*Integration*Spec.class'
    include '**/*Integration*Test.class'

    reports.junitXml.destination = file('build/integration-test-results')
    reports.html.destination = file('build/reports/integration-tests')

    testLogging {
        lifecycle {
            events 'started', 'skipped', 'failed', 'standard_error', 'standard_out'
            exceptionFormat 'short'
        }
    }
}

// AI-powered testing tasks
tasks.register('generateTestSpec') {
    group = 'ai-testing'
    description = 'Generates Spock test specifications from natural language requirements'

    doLast {
        def pipeline = new com.khulnasoft.spock.ai.NaturalLanguageTestPipeline()
        def requirements = file('requirements.txt').text
        def testSpec = pipeline.generateTestSpec(requirements, null)

        def outputFile = file('build/generated-tests/GeneratedTestSpec.groovy')
        outputFile.parentFile.mkdirs()
        outputFile.text = testSpec

        println "Generated test specification: ${outputFile.absolutePath}"
    }
}

tasks.register('classifyTests') {
    group = 'ai-testing'
    description = 'Classifies existing tests and generates classification report'

    doLast {
        def classifier = new com.khulnasoft.spock.ai.TestClassifier()

        // Find all test files
        def testFiles = fileTree('src/test') {
            include '**/*Spec.groovy'
            include '**/*Test.groovy'
        }

        def classifications = []
        testFiles.each { testFile ->
            def testContent = testFile.text
            def testMethods = extractTestMethods(testContent)

            testMethods.each { method ->
                def classification = classifier.classifyTest(method.name, method.content, null)
                classifications << [
                    file: testFile.name,
                    method: method.name,
                    classification: classification
                ]
            }
        }

        generateClassificationReport(classifications)
    }
}

tasks.register('analyzeTestFailures') {
    group = 'ai-testing'
    description = 'Analyzes test failures with AI assistance'

    doLast {
        def analyzer = new com.khulnasoft.spock.ai.TestFailureAnalyzer()

        // This would typically read from test results
        // For now, we'll create a demo analysis
        println "AI Test Failure Analysis"
        println "=" * 40
        println "Feature will analyze test failures and provide intelligent suggestions"
        println "Integration with test results parsing coming next..."
    }
}

tasks.register('generateTestAnalytics') {
    group = 'ai-testing'
    description = 'Generates comprehensive test analytics and reports'

    doLast {
        def dashboard = new com.khulnasoft.spock.ai.TestAnalyticsDashboard()
        def analyticsData = dashboard.generateAnalytics('build/test-results', [:])

        // Export in multiple formats
        def outputDir = file('build/reports/ai-analytics')
        outputDir.mkdirs()

        dashboard.exportAnalytics(analyticsData, outputDir.absolutePath, ['json', 'html'])

        println "AI Test Analytics generated in: ${outputDir.absolutePath}"
    }
}

spotbugs {
    toolVersion = '4.8.6'
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = file('config/spotbugs-exclude.xml')
}

checkstyle {
    toolVersion = '10.17.0'
    configFile = file('config/checkstyle.xml')
}

jacoco {
    toolVersion = '0.8.12'
}

tasks.named('build') {
    dependsOn 'check', 'generateTestSpec'
}

tasks.named('check') {
    dependsOn 'test', 'integrationTest', 'checkstyle', 'spotbugs'
}

tasks.named('clean') {
    delete 'build', 'out'
}

idea {
    module {
        testSourceDirs += file('src/integration-test/groovy')
        testSourceDirs += file('src/integration-test/java')
        sourceDirs += file('src/main/groovy')
    }
}

// Helper methods for Gradle tasks
def extractTestMethods(String testContent) {
    def methods = []

    // Simple regex to find test methods
    def methodPattern = ~/"([^"]+)"/
    def matches = testContent =~ methodPattern

    matches.each { match ->
        methods << [name: match[1], content: '']
    }

    methods
}

def generateClassificationReport(List classifications) {
    def report = [:]

    // Group by test type
    report.byType = classifications.groupBy { it.classification.testType }

    // Group by category
    report.byCategory = classifications.groupBy { it.classification.category }

    // Calculate statistics
    report.statistics = [
        totalTests: classifications.size(),
        byType: report.byType.collectEntries { type, tests -> [type.toString(), tests.size()] },
        byCategory: report.byCategory.collectEntries { category, tests -> [category.toString(), tests.size()] }
    ]

    // Print report
    println "Test Classification Report"
    println "=" * 40
    println "Total Tests: ${report.statistics.totalTests}"
    println "\nBy Type:"
    report.statistics.byType.each { type, count ->
        println "  ${type}: ${count}"
    }
    println "\nBy Category:"
    report.statistics.byCategory.each { category, count ->
        println "  ${category}: ${count}"
    }

    // Save detailed report
    def reportFile = file('build/reports/test-classification.json')
    reportFile.parentFile.mkdirs()
    reportFile.text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(report))
}
